{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/hivqavue/src/components/register.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/src/components/register.vue","mtime":1567595793770},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/css-loader/index.js","mtime":1567594825351},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1567594828202},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/postcss-loader/src/index.js","mtime":1567594826796},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/vuetify-loader/lib/loader.js","mtime":1567594828274},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/cache-loader/dist/cjs.js","mtime":1567594824838},{"path":"/Applications/XAMPP/xamppfiles/htdocs/hivqavue/node_modules/vue-loader/lib/index.js","mtime":1567594828201}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmain{\n  padding-top:0px !important;\n}\n#login-card{\n  position: absolute;\n  top:20vh;\n  right:30vw;\n  min-width: 400px;\n  width:40vw;\n  max-width: 800px;\n}\n",{"version":3,"sources":["register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"register.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t\n\t<div id=\"inspire\"> \n\t<v-card class=\"elevation-3\" id=\"login-card\">\n\t\t<v-snackbar v-model=\"snackbar\" :timeout=\"4000\" top color=\"success\">\n\t\t\t<span>Account Created. We've sent you an activation link via email.</span>\n\t\t\t<v-btn flat color=\"white\" @click=\"errorsnackbar = false\">Close</v-btn>\n\t\t</v-snackbar>\n\t\t<v-snackbar v-model=\"errorsnackbar\" :timeout=\"4000\" top color=\"error\">\n\t\t\t<span>Something went wrong. Kindly try again</span>\n\t\t\t<v-btn flat color=\"white\" @click=\"errorsnackbar = false\">Close</v-btn>\n\t\t</v-snackbar>\n\t\t<Loading v-if='authLoading'/>\n\t\t<v-toolbar class=\"elevation-0\">\n        <v-toolbar-title>R-Placement</v-toolbar-title>\n        <v-spacer></v-spacer>\n      \t</v-toolbar>\n\t\t  <v-form class=\"px-3\"\n\t\t    ref=\"form\"\n\t\t    v-model=\"valid\"\n\t\t    lazy-validation\n\t\t  >\n\t\t\t  <v-card-text>\n\t\t\t  \t<v-text-field\n\t\t\t      v-model=\"userData.name\" :rules=\"nameRules\" prepend-icon=\"person\" name=\"name\" label=\"Username\" required\n\t\t\t    ></v-text-field>\n\t\t\t    <v-text-field\n\t\t\t      v-model=\"userData.email\" :rules=\"emailRules\" prepend-icon=\"mail\" name=\"email\" label=\"E-mail\" required\n\t\t\t    ></v-text-field>\n\t\t\t    <v-text-field\n\t\t\t    \tv-model=\"userData.password\" prepend-icon=\"lock\" :rules=\"passwordRules\" name=\"password\" abel=\"Password\" type=\"password\"\n\t\t\t\t  ></v-text-field>\n\t\t\t\t  <v-text-field\n\t\t\t    \tv-model=\"confirmpassword\" prepend-icon=\"lock\" :rules=\"passwordConfirmRules\" name=\"password\" label=\"Confirm Password\" type=\"password\"\n\t\t\t\t  ></v-text-field>\n\t\t\t\t</v-card-text>\n\t\t\t\t<v-card-actions>\n\t\t\t\t\t<div>\n\t\t\t\t        <v-btn flat small to=\"login\">Login</v-btn>\n\t\t\t\t      </div>\n\t\t        \t<v-spacer></v-spacer>\n\t\t\t\t\t<v-btn color=\"primary\" round :disabled=\"!valid\" @click=\"create\" :loading=\"loading\">\n\t\t\t\t          Create account\n\t\t\t\t    </v-btn>\n\t\t\t\t</v-card-actions>\n\t\t  </v-form>\n\t</v-card>\n\t</div>\n</template>\n<style>\n  main{\n    padding-top:0px !important;\n  }\n  #login-card{\n    position: absolute;\n    top:20vh;\n    right:30vw;\n    min-width: 400px;\n    width:40vw;\n    max-width: 800px;\n  }\n</style>\n<script>\n  import apiCall from '../utils/api'\n  import Loading from './loading'\n  import { mapState } from 'vuex'\n  export default {\n  \tname: 'Register',\n    components: {\n      Loading\n    },\n    data: () => {\n    \treturn {\n    \t  snackbar: false,\n    \t  errorsnackbar: false,\n    \t  loading: false,\n\t      valid: true,\n\n\t      confirmpassword: '',\n\n\t      passwordConfirmRules: [\n\t      \tv => !!v || 'Password Confirm is required'\n\t      ],\n\t      \n\t      nameRules: [\n\t        v => !!v || 'Name is required'\n\t      ],\n\t      \n\t      passwordRules: [\n\t        v => !!v || 'Password is required'\n\t      ],\n\t      \n\t      emailRules: [\n\t        v => !!v || 'E-mail is required',\n\t        v => /.+@.+/.test(v) || 'E-mail must be valid'\n\t      ],\n\t      userData: {\n\t      \tname: '',\n\t      \tpassword: '',\n\t      \temail: '',\n\t      }\n\t  };\n    },\n\n    methods: {\n      reset () {\n        this.$refs.form.reset()\n      },\n      create () {\n      \tif (this.$refs.form.validate()) {\n      \t\tthis.loading = true\n      \t\tapiCall({url: '/api/register', data: this.userData, method: 'POST' })\n          .then(resp => {\n          \tthis.loading = false;\n            this.snackbar = true;\n          })\n          .catch(error => {\n          \tthis.loading = false;\n            this.errorsnackbar = true;\n          })\n      \t}\n\t }\n    },\n    computed: {\n\t    ...mapState({\n\t      authLoading: state => state.auth.status === 'loading',\n\t    })\n\t  },\n  }\n</script>"]}]}